#!ruby
#
# Word Count Journal controller for journals
# 
# 2006-11-17  james.anderson  rss
# 2006-11-18  james.anderson  find!
# 2006-11-19  james.anderson  logging
# 2006-11-20  james.anderson  (WCJ-ASC-F01 WCJ-ASC-F02) added is_admin? to restrict_access
# 2006-11-26  james.anderson  added entry_class (adresses #15)
# 2006-12-04  james.anderson  distinct restrict_read/write; replace Time with Date for interval test in create
# 2006-12-23  james.anderson  #224, #227 : reduce default interval by 1 day, thus 365 days for a
#   non-leap year

VERSIONS[__FILE__] = "$Id$"

require "entry_calendar_controller"
require "annotation"

class JournalsController < ApplicationController
  include EntryCalendarController

  FILL_JOURNAL_ENTRIES = true;
  DEFAULT_ATTRIBUTES = HashWithIndifferentAccess.new(:scope=> User::SCOPE_PUBLIC,
                                                     :initial_count=> 1,
                                                     :comment_state=> 'published')
  # defer entry_sort until the instance has an id
  CREATE_ATTRIBUTE_NAMES = [:title, :description, :state, :scope, :comment_state,
                            :initial_count, :start_date, :end_date]
  UPDATE_ATTRIBUTE_NAMES = [:title, :description, :state, :scope, :comment_state,
                            :initial_count, :start_date, :end_date, :entry_sort]
  SESSION_PARAMS = [['page', 'journal_page'], ['page_size', 'journal_page_size'],
                    'journal_page', 'journal_page_size',
                    'entry_page', 'entry_page_size']
  
  @@rss_per_page = Settings.rss_per_page || 20;
  # @@html_per_page = 7 # Settings.html_per_page || 10;

  # #181, #191 replace access_rule 'admin', :only => [:destroy]
  access_rule 'user || admin', :only => [:create, :destroy, :edit, :new, :update]
  access_rule 'user', :only=> [:assert, :deny, :list_unread]
  
  before_filter :get_date, :only => [:show]
  before_filter :find_user!, :except => [:index, :list, :show, :rss]
  before_filter :find_user_if_specified!, :only=> [:rss]
  before_filter :find_journal!, :only => [:assert, :deny, :destroy, :edit, :show, :print, :update, :add, :remove]
  before_filter :find_journal_if_specified!, :only => [:rss]
  # if franchise-related, then find the group
  before_filter :find_group!, :only => [:add, :remove]
  before_filter :find_group_if_specified!, :only => [:list_unread]
  # Only the owner of the journal can modify it
  before_filter :restrict_write, :only => [:assert, :deny, :edit, :update, :destroy, :add, :remove]
  # ensure that login and resource owner match unless admin
  before_filter :restrict_identity, :only => [:new, :create, :add, :remove]
  # enforce scope
  before_filter :restrict_read, :only=> [:print, :rss, :show]
  
  #sidebar :find_entries, :only => [:index, :list]
  sidebar :journal_statistics, :only => [:show], :position => 'sidebar'
  #sidebar :user_profile, :only => [:show], :if => :user_specified?, :position => 'sidebar'
  #sidebar :journal_subscribe, :only => :show, :if => :journal_specified?, :position => 'sidebar'
  #sidebar :journal_groups, :only => [:show], :position => 'sidebar'
  sidebar :calendar, :only => :show, :position => 'sidebar'
  #sidebar :adsense_250x250, :only => [:show, :list], :position => 'sidebar'
  sidebar :journal_destroy, :only => [:edit], :position => 'sidebar'
  
  sidebar :journal_favorites, :only => :list, :position => 'sidebar'
  sidebar :latest_journals, :only => :list, :position => 'footer'
  sidebar :latest_entries, :only => :list, :position => 'footer'
  sidebar :latest_comments, :only => :list, :position => 'footer'
  
  sidebar :journal_comments, :only => :show, :position => 'footer'
    
  # class methods
  def self.filter_attributes(attributes= {},
                             names=UPDATE_ATTRIBUTE_NAMES,
                             defaults=DEFAULT_ATTRIBUTES)
    super(attributes, names, defaults)
  end

  verify :method => :post, :only => [ :destroy, :create, :update ],
         :redirect_to => { :action => :index }

  # GET action methods
  def index
    list
    render :action => 'list'
  end

  def list
    @journal_pages = nil;
    @journals = nil;
    # respond_to do |wants|
    #   wants.html
    #   wants.js
    # end
  end
  
  # determine the journals which the user has not read relative to some specified context
  def list_unread
    if (@group)
      @journals = Journal.find_unread_instances(current_user, @group.journals)
    elsif ( @user )
      @journals = Journal.find_unread_instances(current_user, @user.journals)
    end
    @journal_pages = Paginator.new(self, @journals.length, [1, @journals.length].max, 1)
  end
    

  # establish the state for presenting a single journal
  # @journal : the designated journal (filtered)
  # @user : author owner of that journal
  # @journals : journal extension scoped for that group
  # @entry_pages, @entries : paginated extension scoped for that group
  # constrain entries by reader privildeges
  def show
    unless @user
      @user = @journal.owner()
    end
    @entries = nil        # compute on-demand
    @entry_pages = nil
    @groups = @journal.groups
    
    record_request(@journal)
    if (logged_in?)
      current_user.set_read_time(@journal)
    end
  end

  def new
    # start_date = DateTime.now
    # end_date = DateTime.civil(start_date.year + 1, start_date.month, start_date.day,
    #                           start_date.hour, start_date.min, start_date.sec).-(1)
    start_date = users_today();
    end_date = DateTime.civil(start_date.year + 1, start_date.month, start_date.day).-(1)
    @journal = Journal.new(DEFAULT_ATTRIBUTES.merge(:owner=>@user,
                                                    :start_date=> start_date,
                                                    :end_date=> end_date))
    zone = @user.timezone
    logger.info("new journal: user: #{@user.id}@#{zone} journal: [#{@journal.start_date} - #{@journal.end_date}]")                                                    
  end
  
  def edit
  end

  # proceeed analogous to show, but with a different encoding
  def print
    unless @user
      @user = @journal.owner()
    end
    @entries = nil        # compute on-demand
    @entry_pages = nil
    @groups = @journal.groups
    
    record_request(@journal)
    if (logged_in?)
      current_user.set_read_time(@journal)
    end
    render :layout => 'print'
  end

  def rss
    # retrieve either journal specific, or site-general
    if (@user && @journal)
      if ( @journal.scope == User::SCOPE_PUBLIC)
        render(:layout=> false, :action=> 'entry_rss')
      else
        redirect_to(:controller=> 'journals', :action=> 'rss', :user_id=> nil, :journal_id=>nil)
      end
    else
      @journals = Journal.find(:all, :limit=>@@rss_per_page, :order=>"updated_at DESC",
                                     :conditions=>[ "scope=?", User::SCOPE_PUBLIC ])
      render(:layout => false, :action=> 'journal_rss')
    end
  end

  # POST actions
  
  # franchise a journal to a group
  def add
    flash[:error] = nil
    flash[:notice] = nil
    if (current_user_is_admin?() ||
        (user_is_current_user?(@journal.owner) &&
         @group.users.include?(current_user)) )
      if (@group.journals.include?(@journal))
        flash[:error] = 'Journal already franchised to group.'
      else
        if (@group.journals << @journal)
          logger.info("journal franchised: [params: " + params[:journal].inspect() +
                      "]: " + @journal.inspect())
          flash[:notice] = 'Journal was successfully franchised.'
        else
          flash[:error] = 'Journal and Group not modified.'
        end
      end
    else
      flash[:error] = 'Journal does not permit access.'
    end
    
    redirect_to(request.env["HTTP_REFERER"] ? :back : {:action => 'show', :journal_id=>@journal.id})
  end

  # make an assertion in the journal's current context 
  #  {:subject=> {:type=> name, :text=> (text + id)},
  #   :predicate=> {:type=> name, :text=> (text + id)},
  #   :object=> {:type=> name, :text=> (text + id)} }
  #   
  def assert
    if ( (subject = intern_query_parameter(params[:subject])) &&
         (predicate = intern_query_parameter(params[:predicate])) &&
         (object = intern_query_parameter(params[:object])) )
        @assertion = @journal.assert(subject, predicate, object)
    end
    render_assertion_response(@assertion)
  end
  
  def create
    group = nil
    journal_params = JournalsController.filter_attributes(params[:journal], CREATE_ATTRIBUTE_NAMES)
    entry_sort = params[:sort_order]
    @journal = Journal.new(journal_params)
    @journal.owner = @user
    
    flash[:error] = ""
    unless ( nil == (group_ids = params[:journal][:group_ids]) )
      case group_ids
      when String
        group_ids = group_ids.split(/[, ]/)
      end
      begin
        @journal.group_ids=(group_ids)
      rescue ArgumentError
        flash[:error] = $!.message()
        logger.warn("journal update failed: [params: #{params[:journal][:group_ids].inspect} ]: #{$!.message()}")
        render :action => 'edit'
        return
      end
    end

    if (@journal.save &&
        ( (nil == @journal.groups) || @journal.groups.all?{|g| g.save}) &&
        ( (nil == entry_sort) || (@journal.entry_sort=(entry_sort) && @journal.save)))
      logger.info("journal created: [params: #{journal_params.inspect()}]: #{@journal.inspect()}")
                  
      flash[:notice] = 'Journal was successfully created.'
      # if the current date is within the journal's period, then start editing
      # 2006-12-04 the end date is inclusive
      date = users_today()
      if ((@journal.start_date .. @journal.end_date) === date &&
          current_user == @user)
        redirect_to :controller=> 'entries', :action => 'new',
                    :journal_id => @journal.id(),
                    :user_id => @user.id(),
                    :date=> date.day, :month=> date.month, :year=> date.year
      else
        # puts("test interval: #{((@journal.start_date .. @journal.end_date) === date).inspect}")
        # puts("test user: #{(current_user == @user).inspect}")
        redirect_to :action=> 'show', :journal_id => @journal.id(),
                                      :user_id => @user.id()
      end
    else
      logger.warn("journal create failed: [params: #{journal_params.inspect()} ]: #{@journal.errors.full_messages}")
      flash[:error] = 'Journal was not created.'
      render :action => 'new'
    end
  end

  def deny
    if ( (subject = intern_query_parameter(params[:subject])) &&
         (predicate = intern_query_parameter(params[:predicate])) &&
         (object = intern_query_parameter(params[:object])) )
      @assertion = @journal.deny(subject, predicate, object)
    end
    render_assertion_response(@assertion)
  end

  def destroy
    logger.info("journal to be removed: " + @journal.inspect())
    @journal.remove!
    flash[:notice] = 'Journal was successfully deleted.'
    
    # redirect_to :action => 'list'
    redirect_to :controller =>"users", :action => 'show',
                :user_id=>@user.id()
  end
  
  def remove
    @group.journals.delete(@journal)
    if (@group.save && @journal.save)
      logger.info("journal retracted: [params: #{params.inspect()}]: #{@journal.inspect()}")
      flash[:notice] = 'Journal was successfully retracted.'
    else
      flash[:error] = 'Journal was not modified.'
    end
    redirect_to :back #:action => 'show', :journal_id=> @journal.id
  end
  
  def update
    journal_params = JournalsController.filter_attributes(params[:journal], UPDATE_ATTRIBUTE_NAMES)
    logger.debug("update: form attributes: #{params[:journal].inspect} filtered to: #{journal_params.inspect}")

    # puts("controller groups: #{@journal.groups.inspect}")
    flash[:error] = ""
    if (params[:journal] && group_ids = params[:journal][:group_ids])
      case group_ids
      when String
        group_ids = group_ids.split(/[, ]/)
      end
      begin
        @journal.group_ids=(group_ids)
      rescue ArgumentError
        flash[:error] = $!.message()
        logger.warn("journal update failed: [params: #{params[:journal][:group_ids].inspect} ]: #{$!.message()}")
        render :action => 'edit'
        return
      end
    end
    # puts("controller ids: #{group_ids}, groups: #{@journal.groups.inspect}")
    
    if ( @journal.update_attributes(journal_params) &&
         ( (nil == @journal.groups) || @journal.groups.all?{|g| g.save}))
      logger.info("journal updated: [params: #{journal_params.inspect()}]: #{@journal.inspect()}")
      flash[:notice] = 'Journal was successfully updated.'
      redirect_to :action=> 'show', :journal_id=> @journal.id()
    else
      logger.warn("journal update failed: [params: #{journal_params.inspect()} ]: #{@journal.errors.full_messages}")
      render :action => 'edit'
    end
  end


  hide_action :breadcrumb_trail, :entry_class
  
  def instance_page_title()
    if (@journal && @journal.active?)
      "'#{@journal.title}' by #{@journal.owner.login} - #{super()}"
    elsif (@user && @user.active?)
      "#{@user.login}: Journals - #{super()}"
    else
      super()
    end
  end
      
  def instance_auto_discovery_link_tag(view)
  	if ( action_name == 'show' && @user && @journal )
	     view.auto_discovery_link_tag(:rss, {:action => 'rss', :user_id=> @user.id, :journal_id=> @journal.id}, {:title=> "RSS: " + @journal.title})
	   else
	     ""
	   end
  end

  # generate a breadcrumb for the current resource
  # the successive levels depend on the controller, the operation, and the requested resource.
  # a journals_controller recognizes
  #   :list :new :show
  #   :create :destroy :index :update : all redirect
  def breadcrumb_trail()
    trail = [ ['Home', home_url] ]
    if (@journal && @journal.active?)
      case (action_name.instance_of?(String) ? action_name.intern() : action_name)
      when :show
        trail << ["People", {:controller=> "users", :action=> :list}]
        trail << [@journal.owner.login, @journal.owner.url]
        trail << @journal.title
      when :print
        trail << ["People", {:controller=> "users", :action=> :list}]
        trail << [@journal.owner.login, @journal.owner.url]
        trail << [@journal.title, @journal.url]
        trail << 'Print'
      when :list
        trail << "Journals"
      when :new, :create
        trail << ["People", {:controller=> "users", :action=> :list}]
        trail << [@journal.owner.login, @journal.owner.url]
        trail << "New Journal"
      when :edit, :update
        trail << ["People", {:controller=> "users", :action=> :list}]
        trail << [@journal.owner.login, @journal.owner.url]
        trail << [@journal.title, @journal.url]
        trail << 'Edit'
      end
    else
      # was a list w/o a journal
      trail << "Journals"
    end
    trail
  end

  def entry_class(date, context_params = {})
    if (@journal)
      context_entry_class(date, {:journal=> @journal}.merge(context_params))
    else
      ENTRY_CLASS_OK
    end
  end
  
  
  protected

#  superceded by ApplicationController#compute_journal_pages
#  # compute paginated journals
#  def compute_journal_pages(args = params)
#    page_size = session_param([:journal_page_size, :page_size], Settings.journal_limit, args) || Journal.count
#    page_number = page_number_param([:journal_page, :page], 1, args) # not used here
#    if (@user = find_user!(params.merge(:if_does_not_exist => nil)))
#      # constrain the constituents by current user's privileges
#      Journal.with_scope(:find=> {:conditions=> ['user_id = ?', @user.id()]}) {
#        @journal_pages, @journals =
#          ((current_user_is_admin?() || user_is_current_user?()) ?
#           paginate(:journals, :per_page => page_size,
#                               :order => 'updated_at DESC') :
#           paginate(:journals, :per_page => page_size,
#                               :conditions=>[ "scope=?", User::SCOPE_PUBLIC ],
#                               :order => 'updated_at DESC') )
#    }
#    else
#      @journal_pages, @journals =
#      (current_user_is_admin?() ?
#       paginate(:journals, :per_page => page_size,
#                           :order => 'updated_at DESC') :
#       paginate(:journals, :per_page => page_size,
#                           :conditions=>[ "scope=?", User::SCOPE_PUBLIC ],
#                           :order => 'updated_at DESC') )
#    end
#  end
  
  
  # compute paginated entries on-demand in a journal context
  # differs from ApplicationController version in that it fills.
  # 
  # for a non-author, use that user's (@journal x :sort) settings, defaulted to (@journal.owner x :sort)
  # to determine the sort order
  def compute_entry_pages(args = {})
    page_size = session_param([:entry_page_size, :page_size], Settings.entry_limit, args) || Entry.count
    page_number = page_number_param([:entry_page, :page], 1, args)
    fill_entries_p = param(:fill_entries, FILL_JOURNAL_ENTRIES, args)
     logger.debug("j_c#c_e_p: caller: #{caller()[0..16].inspect}")
     logger.debug("j_c#c_e_p: args: #{args.inspect}")
     logger.debug("j_c#c_e_p: params: #{params.inspect}")
     logger.debug("j_c#c_e_p: session pre: #{session.inspect}")
     logger.debug("j_c#c_e_p: paging: #{page_size} / #{page_number}")
    conditions = []
    if (params[:journal_id])
      if ( journal = @journal )
        entry_sort = presentation_setting(@journal, :entry_sort, [args, session, current_user, @journal.owner, site_context()]) || {}
        sort_column = entry_sort['column'] || 'date'
        sort_order = entry_sort['order'] || 'DESC'
        @page_sort_order = {'column' => canonical_sort_column(sort_column), 'order'=> canonical_sort_order(sort_order)}
        order_option = "#{@page_sort_order['column']} #{@page_sort_order['order']}"
        # logger.debug("j_c#c_e_p: session post: #{session.inspect}")
        # logger.debug("j_c#c_e_p: entry_sort: #{entry_sort.inspect}")
        # logger.debug("j_c#c_e_p: @page_sort_order: #{@page_sort_order.inspect}")
 
        Entry.with_scope(:find=> {:conditions=> (conditions = ['journal_id = ?', journal.id()])}) {
          if (user_is_current_user?() || current_user_is_admin?())
            if ( fill_entries_p )
              # optionally fill entries for the author or the admin
              @entries = fill_entries(Entry.find(:all, :order => 'date DESC'), journal)
              @entry_pages = Paginator.new(self, @entries.length, [page_size, @entries.length].max, 1)
            else
              # otherwise, just the extant entries, whereby unpublished for author|admin only
              @entry_pages, @entries =
                paginate( :entries, :order => order_option,
                                    :per_page => page_size,
                                    :page=> page_number)
            end
          else
            @entry_pages, @entries =
              paginate( :entries, :order => order_option,
                                  :per_page => page_size,
                                  :page=> page_number,
                                  :conditions=> (conditions = [ "state=?", Entry::STATE_PUBLISHED ]))
         end
        }
      else
        # generate an empty list if the journal was specified, but not found
        order_option = ""
        @entries = []
        @entry_pages =
         Paginator.new(self, 0, page_size, page_number)
      end
      logger.debug("JC#c_e_p: #{args.inspect} admin: #{current_user_is_admin?()} page: #{page_number} x #{page_size} journal: #{@journal ? @journal.id : '-'}")
      logger.debug("JC#c_e_p: ? [#{conditions.join(' ')}] x #{order_option}")
      logger.debug("JC#c_e_p: = [#{@entries.map{|i| i.id.to_s}.join(',')}]/#{@entry_pages.current_page.to_sql.inspect}/#{@entry_pages.page_count}/#{@entry_pages.item_count}")  
    else
      logger.debug("JC#c_e_p: => super")
      super()
    end
  end
  
  # bind a date for use with the calendar when :show
  def get_date
    @date = users_today()
  end
    
  # used to determine whether to permit the current (possibly not authenticated) user access
  # to read a resource in the journal realm
  def restrict_read
    # puts("*** journal::restrict_read: #{current_user.inspect()} #{logged_in?} roles: #{current_user && current_user.roles} params: #{params.inspect}")
    # puts("*** journal::restrict_read: " + @journal.inspect())
    # if no specific journal or the journal is public, ok for any request
    if (@journal == nil || (@journal.scope == User::SCOPE_PUBLIC))
      true
    # otherwise, require authentication
    else
      # puts("*** journal::restrict_read: (owner: #{@journal}[#{@journal.id}]) == (current_user: #{current_user}[#{current_user.id}]) = #{(@journal && @journal.owner == current_user)}")
      # puts("*** journal::restrict_read: admin?: #{current_user_is_admin?.to_s}")
      if (logged_in?)
        # do not restrict admins. otherwise both the owner and members of
        # a franchising group can read
        if (current_user_is_admin?() ||
            (@journal.owner == current_user) ||
            (@journal.groups.any?{|g| g.users.include?(current_user)}))
          true
        else
          permission_denied('list')
        end
      else
        permission_denied('list')
      end
    end
  end

  # used to determine whether to permit the current (authenticated) user access
  # to the designated journal. admin users are always allowed, otherwise the
  # user must be the journal owner
  def restrict_write
    # puts("*** journal::restrict_write: #{current_user.inspect()} params: #{params.inspect}")
    # puts("*** journal::restrict_write: " + @journal.inspect())
    # puts("*** journal::restrict_write: (owner: #{@journal}[#{@journal.id}]) == (current_user: #{current_user}[#{current_user.id}]) = #{(@journal && @journal.owner == current_user)}")
    # puts("*** journal::restrict_write: admin?: #{current_user_is_admin?.to_s}")
    if (current_user_is_admin?() || (@journal && @journal.owner == current_user))
      true
    else
      permission_denied()
    end
  end

  # used to determine whether to permit the current (authenticated) user access
  # to act as the designated user. admin users are always alloed. otherwise the user
  # must be the designated user
  # todo: may be generalizable to application_controller
  def restrict_identity
    if (current_user_is_admin?() || @user == current_user)
      true
    else
      permission_denied()
    end
  end
 
  # if access is denied, log the event and redirect.
  # action parameter permits read restrictions to redirect to list (since they could be a failed show)
  # while failed write operations show the respective entity
  def permission_denied(action='show')
    logger.info("[authentication] Permission denied to %s at %s for %s" %
      [(logged_in? ? current_user.login : 'guest'), Time.now, request.request_uri])
    flash[:error] = (logged_in? ? "You do not have access to this." : "That action requires that you first log in.")
    if @user
      redirect_to( :controller=> 'users',
                   :action => action, :user_id=> @user.id)
    else
      redirect_to( :action => action)
    end
    return false
  end

end
